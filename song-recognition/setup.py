"""
Script de configura√ß√£o para Song Recognition
"""
import os
import sys
import subprocess
import platform

def run_command(command, description):
    """Executa um comando e mostra o resultado"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro em {description}: {e.stderr}")
        return False

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {version.major}.{version.minor}.{version.micro}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} detectado")
    return True

def create_virtual_environment():
    """Cria ambiente virtual"""
    if os.path.exists('venv'):
        print("‚úÖ Ambiente virtual j√° existe")
        return True
    
    return run_command('python -m venv venv', 'Criando ambiente virtual')

def install_dependencies():
    """Instala depend√™ncias do projeto"""
    pip_cmd = 'venv\\Scripts\\pip' if platform.system() == 'Windows' else 'venv/bin/pip'
    
    # Atualizar pip primeiro
    run_command(f'{pip_cmd} install --upgrade pip', 'Atualizando pip')
    
    # Instalar depend√™ncias
    return run_command(f'{pip_cmd} install -r requirements.txt', 'Instalando depend√™ncias')

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ['data', 'temp_audio', 'static/uploads']
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ Diret√≥rio criado: {directory}")
        else:
            print(f"‚úÖ Diret√≥rio j√° existe: {directory}")
    
    return True

def setup_environment_file():
    """Configura arquivo de ambiente"""
    if os.path.exists('.env'):
        print("‚úÖ Arquivo .env j√° existe")
        return True
    
    if os.path.exists('env.example'):
        import shutil
        shutil.copy('env.example', '.env')
        print("‚úÖ Arquivo .env criado a partir do env.example")
        print("‚ö†Ô∏è  Configure suas chaves de API no arquivo .env")
        return True
    else:
        print("‚ö†Ô∏è  Arquivo env.example n√£o encontrado")
        return False

def main():
    """Fun√ß√£o principal de setup"""
    print("üéµ Song Recognition - Configura√ß√£o do Projeto")
    print("=" * 50)
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Criar ambiente virtual
    if not create_virtual_environment():
        print("‚ùå Falha ao criar ambiente virtual")
        sys.exit(1)
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("‚ùå Falha ao instalar depend√™ncias")
        sys.exit(1)
    
    # Criar diret√≥rios
    create_directories()
    
    # Configurar arquivo de ambiente
    setup_environment_file()
    
    print("\n" + "=" * 50)
    print("üéâ Configura√ß√£o conclu√≠da com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure suas chaves de API no arquivo .env")
    print("2. Ative o ambiente virtual:")
    
    if platform.system() == 'Windows':
        print("   venv\\Scripts\\activate")
    else:
        print("   source venv/bin/activate")
    
    print("3. Execute a aplica√ß√£o:")
    print("   python run.py")
    print("\nüåê Acesse: http://localhost:5000")

if __name__ == '__main__':
    main()
